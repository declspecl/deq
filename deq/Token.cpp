#include "Token.h"

Token::Token(TokenType type, unsigned offset, unsigned length)
	: type(type)
	, offset(offset)
	, length(length)
{

}

std::string Token::to_string() const
{
    switch (this->type)
    {
    case L_PAREN:
        return "L_PAREN";
    case R_PAREN:
        return "R_PAREN";
    case L_SQUARE_BRACKET:
        return "L_SQUARE_BRACKET";
    case R_SQUARE_BRACKET:
        return "R_SQUARE_BRACKET";
    case L_CURLY_BRACKET:
        return "L_CURLY_BRACKET";
    case R_CURLY_BRACKET:
        return "R_CURLY_BRACKET";
    case L_ANGLED_BRACKET:
        return "L_ANGLED_BRACKET";
    case R_ANGLED_BRACKET:
        return "R_ANGLED_BRACKET";
    case L_ANGLED_BRACKET_EQUALS:
        return "L_ANGLED_BRACKET_EQUALS";
    case R_ANGLED_BRACKET_EQUALS:
        return "R_ANGLED_BRACKET_EQUALS";
    case COMMA:
        return "COMMA";
    case PERIOD:
        return "PERIOD";
    case COLON:
        return "COLON";
    case DOUBLE_COLON:
        return "DOUBLE_COLON";
    case SEMICOLON:
        return "SEMICOLON";
    case BACK_SLASH:
        return "BACK_SLASH";
    case FORWARD_SLASH:
        return "FORWARD_SLASH";
    case FORWARD_SLASH_EQUALS:
        return "FORWARD_SLASH_EQUALS";
    case PIPE:
        return "PIPE";
    case DOUBLE_PIPE:
        return "DOUBLE_PIPE";
    case EXCLAMATION_MARK:
        return "EXCLAMATION_MARK";
    case EXCLAMATION_EQUALS:
        return "EXCLAMATION_EQUALS";
    case AT_SIGN:
        return "AT_SIGN";
    case POUND_SIGN:
        return "POUND_SIGN";
    case DOLLAR_SIGN:
        return "DOLLAR_SIGN";
    case PERCENT_SIGN:
        return "PERCENT_SIGN";
    case CARET:
        return "CARET";
    case AMPERSAND:
        return "AMPERSAND";
    case DOUBLE_AMPERSAND:
        return "DOUBLE_AMPERSAND";
    case ASTERISK:
        return "ASTERISK";
    case ASTERISK_EQUALS:
        return "ASTERISK_EQUALS";
    case PLUS:
        return "PLUS";
    case PLUS_EQUALS:
        return "PLUS_EQUALS";
    case EQUALS:
        return "EQUALS";
    case DOUBLE_EQUALS:
        return "DOUBLE_EQUALS";
    case MINUS:
        return "MINUS";
    case MINUS_EQUALS:
        return "MINUS_EQUALS";
    case UNDERSCORE:
        return "UNDERSCORE";
    case IF:
        return "IF";
    case ELSE:
        return "ELSE";
    case FOR:
        return "FOR";
    case WHILE:
        return "WHILE";
    case MATCH:
        return "MATCH";
    case CASE:
        return "CASE";
    case LET:
        return "LET";
    case FN:
        return "FN";
    case THIS:
        return "THIS";
    case RETURN:
        return "RETURN";
    case NULL_:
        return "NULL_";
    case I8:
        return "I8";
    case I16:
        return "I16";
    case I32:
        return "I32";
    case I64:
        return "I64";
    case U8:
        return "U8";
    case U16:
        return "U16";
    case U32:
        return "U32";
    case U64:
        return "U64";
    case F32:
        return "F32";
    case F64:
        return "F64";
    case STRING:
        return "STRING";
    case CHAR:
        return "CHAR";
    case BOOL:
        return "BOOL";
    case IDENTIFIER:
        return "IDENTIFIER";
    case INTEGER_LITERAL:
        return "INTEGER_LITERAL";
    case FLOAT_LITERAL:
        return "FLOAT_LITERAL";
    case CHAR_LITERAL:
        return "CHAR_LITERAL";
    case STRING_LITERAL:
        return "STRING_LITERAL";
    case TRUE_LITERAL:
        return "TRUE";
    case FALSE_LITERAL:
        return "FALSE";
    case EOF_:
        return "EOF";
    default:
        return "UNKNOWN";
    }
}